[["stacked-taxonomy-bar-graphs.html", "Chapter 5 Stacked taxonomy bar graphs 5.1 Required libraries 5.2 Required files 5.3 Defining taxonomic rank 5.4 Prepping the metadata table 5.5 Combine and melt dataframes 5.6 Identify most abundant taxa 5.7 Assign color and italicize taxa 5.8 Saving and loading color range 5.9 Plotting your figures 5.10 Export tables 5.11 Complete code", " Chapter 5 Stacked taxonomy bar graphs pre, code {white-space:pre !important; overflow-x:auto} One common way to begin analyzing your data is with stacked taxonomy bar graph. Theses graphs are great for looking at the distribution of different taxa across all of your samples at the same time. Yet, keep in mind that they are best used for simpler data given that there is only about a dozen or so of different colors that are easily distinguishable by the human eye. Still, even tho no one likes stacked taxonomy bar graphs, they have somehow found a way into microbial ecology, so we as humans just keep making them. Before beginning, it is important to consider you own data and what would be the best way to present your figures to the readers. In the case of the data used in this pipeline, we had two distinct experiences, our samples were either “raw” groundwater samples collected and filtered on the same day, or rock pellets and groundwater samples collected at different times from three different bioreactors… so lots of different plots to generate with different variables… In the end, we decided to present our data in the following way which we deemed the easiest to interpret by the readers : Below you will find all the lines of codes which were used to generate these figures along with a thorough description of the code to allow you to adapt this code to your own data. We believe this code to be attractive to others based on the following characteristics : The taxonomy rank of interest is defined only once (to avoid having to find and replace all occurrence of the taxonomic rank to adapt this scrip to different ranks of interest) The use of a for loop to generate and save multiple figures based on a defined iterator (for more details on iterations and iterators) The grouping of less abundant taxa in the category Others The fact that this grouping is done for every sample individually using a for loop Each taxa is assigned a specific color and this same color is used in the different figures The names of the taxa are presented in italic The most abundant taxa is aligned along the bottom of the chart to allow a better comparison between samples The legend is presented in alphabetical order with the exception of the category Others which figures at the top Finally, the last section of this guide describes further ways of manipulating and presenting your plots to generate beautiful and publishable figures. 5.1 Required libraries 5.1.1 Installing libraries These libraries were installed in R version 4.3.1 install.packages(&quot;devtools&quot;) devtools::install_github(&quot;andyofsmeg/ggTag&quot;) install.packages(&quot;forcats&quot;) install.packages(&quot;dplyr&quot;) if (!require(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) BiocManager::install(version = &quot;3.17&quot;) BiocManager::install(&#39;phyloseq&#39;) install.packages(&quot;randomcoloR&quot;) install.packages(&quot;ggplot2&quot;) install.packages(&quot;tidyr&quot;) install.packages(&quot;stringr&quot;) install.packages(&quot;ggtext&quot;) install.packages(&quot;DT&quot;) 5.1.2 Loading the libraries library(devtools) library(ggTag) # To extract title from plots library(forcats) # To reorder our factors (function &quot;fct_relevel&quot;) library(dplyr) # Dataframe manipulation (notably function &quot;pull&quot;) library(tidyr) # Dataframe manipulation (function &quot;separate&quot;) library(phyloseq) # Very pratical library for the analysis of amplicon data library(randomcoloR) # Generate sets of random colors library(ggplot2) # Generate plots library(stringr) # Makes working with strings as easy as possible (function &quot;str_replace&quot;) library(ggtext) # Allows the use of markdown text (used to make names italic) library(glue) 5.2 Required files Three files are required for this script : Amplicon sequence variant (ASV) table (rarefied_asv_bac.csv) Taxonomy table (rarefied_taxa_bac.csv) Sample metadata table (rarefied_meta_bac.csv) ASV and Taxonomy table In our case, the first two files were generated from Illumina-sequenced paired-end fastq files using the DADA2 pipeline v1.16. To control for uneven sequencing effort in amplicon sequence analyses we normalized the sampling depth by the random subsampling of sequences from each sample down to the lowest but reasonable sample’s depth. This normalization method is refereed to as rarefying. While this approach is the subject of considerable debate and statistical criticism (see the 2014 PLOS Computational Biology paper, “Waste not, want not: why rarefying microbiome data is inadmissible” by McMurdie and Holmes) and alternative methods have been developed (DESeq2, cumulative sum scaling (CSS), and more…) rarefaction is still widely used and very popular in the literature. The script used for the rarefaction of our sample is available here. Sample metadata table Metadata provides the key to gaining biological insight from your data. The compiling of sample metadata is typically a step you will have started before beginning your amplicon sequence analysis. The metadata table typically contains descriptions of the samples, such as origin, sample type, geophysical characteristics, time point, etc… path=&quot;~/project/domain/int_data&quot; asv=read.table(file = glue(&quot;{path}/rarefied_asv_bac.csv&quot;), sep=&quot;,&quot;, row.names=1, header=TRUE, check.names=FALSE) taxa=read.table(file = glue(&quot;{path}/rarefied_taxa_bac.csv&quot;), sep=&quot;,&quot;, row.names=1, header=TRUE) meta=read.table(file = glue(&quot;{path}/rarefied_meta_bac.csv&quot;), sep=&quot;,&quot;, row.names=1, header=TRUE) Below is a preview of these three table. 5.3 Defining taxonomic rank This is were we define which taxonomy rank we want to show in our figures. In this example we want to display the relative abundance of taxon at the genus level. taxa_rank=&quot;Genus&quot; 5.4 Prepping the metadata table Getting your data ready for the analysis may not be the longest and most complex part of your code (especially compared to plotting the figures…), but may be the part where you spend a lot of time thinking about your own set of data. I recommend visualizing and even drawing different sets of figures in order to help you identify which variables to consider in your own code. As a reminder… “Data Scientists spend up to 80% of the time on data cleaning and 20% of their time on actual data analysis” Dasu and Johnson, 2003 In our case, we first had to generate new columns in the sample metadata table with some crucial information (experience #, time, bioreactor #, and replicate #) which were only defined in the sample names. This first chunk of code was therefore used to extract the “row.names” from the meta dataframe into a new column named ”sample_name”, which is then split into five new columns using the hyphen (-) as separator. The last three lines of code were used to replace certain abbreviation and words in order to improve the quality and readability of the final figures. # Create new column called sample_name from the row.name meta$sample_name=row.names(meta) # Separate column sample_name based on hyphen into five new columns meta=separate(meta, col=sample_name, into=c(&quot;experience&quot;, &quot;short_sample_type&quot;, &quot;time&quot;, &quot;bioreactor&quot;, &quot;replicate&quot;), sep=&quot;-&quot;) # reset the row.name because R meta$sample_name=row.names(meta) # Replacing abbreviation meta$experience=gsub(&quot;E&quot;, &quot;Experience &quot;, meta$experience) # In the column experience, replace E with Experience meta$bioreactor=gsub(&quot;B0&quot;,&quot;Aquifer&quot;, meta$bioreactor) # In the column bioreactor, replace B00 with Aquifer meta$bioreactor=gsub(&quot;B&quot;, &quot;Bioreactor &quot;,meta$bioreactor) # In the column bioreactor, replace B with Bioreactor We could then begin the puzzling task of identifying which variables we would use as iterator in our for loop to generate the figures and how to present the data on the x axis. If we go back to our data, we have… 2 experiences ; 3 types of samples ; Raw groundwater (identified as Aquifer) ; Rock pellets ; Groundwater ; 3 bioreactors ; … all along a temporal scale. We decided that we wanted each figure to represent a different experience and sample type. We would therefore have four figures : Experience 1 - Groundwater Experience 1 - Rock Experience 2 - Groundwater Experience 2 - Rock In each of these figures, we would use ggplot2 function facet_grid to split the graph in different panels based on the values from the column bioreactor (either Aquifer, Bioreactor 1, Bioreactor 2, Bioreactor 3). Sampling time would be used for the x-axis. Therefore, as iterator, we created a new column called experience_sample combining the values from the experience and sample type column. For the x-axis, we had certain samples collected at the same time to generate different replicates so we couldn’t simply use the column time because then those samples would be stacked together. This was notably the case for the aquifer samples from time T00 and all the rock samples from the experience 2. We had to generate a new column which we called time_replicate and populated this new column by using the function ifelse : if value from the column bioreactor = Aquifer, then populate column time_replicate with string “T00.” (for time 00) followed by the value from the column replicate; and if value from the column experience = Experience 2 and Sample_type = Rock, then populate column time_replicate with the value from the column time followed by the string “R.” (for replicate) and value from the column replicate ; for all other cases (else), simply populate the column time_replicate with values from the column time. # Creating new column for our iterator by combining experience # and sample type meta$experience_sample=paste(meta$experience,&quot;-&quot;,meta$Sample_type) # create the new column to be used for the x axis (representing both times and replicate #) meta$time_replicate=with(meta, ifelse(bioreactor==&quot;Aquifer&quot;, paste(&quot;T00.&quot;, meta$replicate, sep = &quot;&quot;), ifelse(experience==&quot;Experience 2&quot; &amp; Sample_type==&quot;Rock&quot;, paste(meta$time,paste(&quot;R.&quot;, meta$replicate), sep = &quot;-&quot;), meta$time))) # Getting rid of unnecessary columns meta=subset(meta, select=-c(position_pastille, temp, ph, do_percent, dic, doc, short_sample_type)) This is now the look of our sample metadata table : 5.5 Combine and melt dataframes We now want to combine into one single dataframe the abundance of the different ASV, the taxonomy assigned to each ASV, and our cleaned up sample metadata dataframe. For this we are using the package and function phyloseq before melting our dataframe to what we call long format. # Merge into phyloseq object ps=phyloseq(otu_table(asv, taxa_are_rows=TRUE), tax_table(as.matrix(taxa)), sample_data(meta)) # Get abundance in % ps_rel_abund=transform_sample_counts(ps, function(x) x/sum(x)) # Agglomerate taxa at taxonomic rank defined earlier glom=tax_glom(ps_rel_abund, taxrank = taxa_rank) # Melt to long format melted_df=psmelt(glom) The look of the melted dataframe : 5.6 Identify most abundant taxa In this step we are using a for loop again in order to identify in each sample the X number of most abundant taxa. All other taxa will be renamed as Others. The X number of taxa to show in every sample can be changed to whatever the user prefers by simply modifying the value for the variable number_of_taxa. Yet, keep in mind that the most abundant taxa will most probably not be the same in each sample and therefore your legend will likely include more taxa then the number defined here. # Defining the number of most abundant taxa to keep number_of_taxa=5 # Create an empty list that we will populated with the unique taxa of each sample list_of_all_taxonomic_rank= list() i = 0 # Beginning of the for loop for (each_sample in unique(melted_df$Sample)){ i=i+1 sample=subset(melted_df, Sample==each_sample) # Create a new dataframe from the iterator (sample). total_abundance=aggregate(sample$Abundance, by=list(taxa_rank=sample[[taxa_rank]]), FUN=sum) # Combine together the same taxa and sum the abundances top=head(total_abundance[order(total_abundance$x, decreasing= T),], n=number_of_taxa) # Sort by abundance and keep only the X number of taxa defined by variable number_of_taxa others_df=sample[!sample[[taxa_rank]] %in% top$taxa_rank,] # Extract in a new dataframe all taxa that are not present in the dataframe `top` others_list=pull(others_df, taxa_rank) # Create a list by pulling all the values from the column corresponding to the taxa_rank into a list sample[sample[[taxa_rank]]%in% others_list,][[taxa_rank]]=&quot;Others&quot; # In the dataframe `sample` rename all the taxa from the list `others_list` as `Others` list_of_all_taxonomic_rank[[i]]=sample #save this dataframe in our list } df=do.call(&quot;rbind&quot;,list_of_all_taxonomic_rank) # combine all the dataframe from the list into one dataframe unique_taxon=data.frame(unique(df[[taxa_rank]])) # create dataframe with the unique names of taxa name=colnames(unique_taxon) # extract the name of the column in order to rename the column with the following line names(unique_taxon)[names(unique_taxon)==name]=as.character(taxa_rank) # Rename the column to the taxa rank defined earlier 5.7 Assign color and italicize taxa We are now generating a new set of random unique colors and assigning a specific color to each taxa from our list of most abundant taxa. We are also using the markdown syntax to italicize the taxa name in both the legend and dataframe. If you wish to use a previously saved color palette do not run the following chunk of code and jump to section Saving and loading color range # get the total number of unique most abundant taxa n=nrow(unique_taxon) # generate a set of X unique colors corresponding to the number of unique taxa palette=distinctColorPalette(n) unique_taxon[[taxa_rank]]=factor(unique_taxon[[taxa_rank]]) names(palette)=levels(unique_taxon[[taxa_rank]]) # assign gray to category &quot;Others&quot;. The same nomenclature can be use to manually change certain colors. palette[[&quot;Others&quot;]]=&quot;#E1E1E1&quot; # recreate palette with markdown to italicize name and remove the underscore after Unclassified all_names=data.frame(names(palette)) names_markdown=all_names %&gt;% mutate(names.palette.=str_replace(names.palette., &quot;(.*)&quot;,&quot;*\\\\1*&quot;), # Adding asterisk at beginning and end of every taxa names.palette.=str_replace(names.palette., &quot;\\\\*Unclassified_(.*)\\\\*&quot;,&quot;Unclassified *\\\\1*&quot;), # Removing the asterisk for words that don&#39;t need to be italicize (Unclassified and Others) names.palette.=str_replace(names.palette., &quot;\\\\*Others\\\\*&quot;, &quot;Others&quot;)) list_names=as.vector(names_markdown$names.palette.) # Replace names of object names(palette)=c(list_names) # Making the same modification to the taxa name from the legend to the taxa names in the dataframe df[[taxa_rank]]=str_replace(df[[taxa_rank]], &quot;(.*)&quot;,&quot;*\\\\1*&quot;) df[[taxa_rank]]=str_replace(df[[taxa_rank]], &quot;\\\\*Unclassified_(.*)\\\\*&quot;,&quot;Unclassified *\\\\1*&quot;) df[[taxa_rank]]=str_replace(df[[taxa_rank]], &quot;\\\\*Others\\\\*&quot;, &quot;Others&quot;) # Ordering the legend in alphabetical order legend_raw=unique(df[[taxa_rank]]) #Extract legend as text ordered_legend=sort(legend_raw) # order alphabetically reordered_legend=fct_relevel(ordered_legend, &quot;Others&quot;) # move &quot;Others&quot; to the beginning final_legend=levels(reordered_legend) # Extract the levels in a new object my_scale &lt;- scale_fill_manual(name=as.character(taxa_rank), breaks=paste(final_legend), values = palette, na.translate=FALSE, drop=TRUE, limits = force) # Recreate color fill 5.8 Saving and loading color range If you wish to save your current color palette use the following line of code to save it as an R data file. # Create a name for saving the object which includes both the rank and number of taxa scale_name=paste(taxa_rank,&quot;-&quot;,number_of_taxa,&quot;-&quot;,&quot;colors&quot;,&quot;.rds&quot;, sep=&quot;&quot;) # Save palette using the defined name saveRDS(my_scale,as.character(scale_name)) If you wish to load a previously saved color palette use the following line of code. my_scale=readRDS(&quot;name_of_your_palette.rds&quot;) # Load color palette 5.9 Plotting your figures Finally this is where we are generating the final figures. As you can see we are again using a for loop to generate multiple figures with only one chunk of code. As a reminder we decided to generate four figures based on the experience number and sample type. Hence we generated a new column called experience_sample which we are using here as our iterator. We are using the function fct_reorder to align along the bottom and top axis the most abundant taxa. plot_list = list() # Generate empty list which we will populate with our generated figures i = 0 for (experiences_and_sample in unique(df$experience_sample)){ i = i + 1 df_sample=subset(df, experience_sample==experiences_and_sample) p=ggplot(df_sample, aes(x=time_replicate, weight=Abundance, fill=fct_reorder(.data[[taxa_rank]],Abundance,.desc=FALSE))) + # .data is very important to force the evaluation of the input variables (taxonomic_rank) geom_bar() + labs(y =&#39;Relative abundance (%)&#39;, x=&quot;Time&quot;) + scale_y_continuous(expand = c(0,0)) + # Remove the white space theme_classic() + theme(text = element_text(size = 9), axis.title=element_text(size=8), legend.title=element_text(size=8), plot.title = element_text(hjust =0.5), axis.text.x = element_text(angle=70,vjust = 0.5, size=7), legend.position=&quot;bottom&quot;, legend.text=element_markdown(size=7), legend.key.size = unit(0.5, &#39;cm&#39;), # adjusting the size of the legend colored box strip.background = element_blank()) + # remove facet_grid box background ggtitle(paste(experiences_and_sample)) + # Use the value from our new column as plot title. This title will then be extracted to save the figures. my_scale + # Load our color palette facet_grid(~bioreactor, scales=&quot;free&quot;, space=&quot;free&quot;) + # facet_grid according to bioreactor guides(fill=guide_legend(nrow=6, title=taxa_rank, title.position=&quot;top&quot;, title.hjust = 0.5, reverse=FALSE)) # Adjusting the legend, notably the number of rows and position plot_list[[i]] = p # save plot into list } # Uncomment the following line to visualize your plots in R. # plot_list # Set path for saving plots plot_path=&quot;figures&quot; # Set the path to where you want to save your figures for (i in plot_list[]){ title=extractGGTitle(i) # extract title from plot titlepdf=paste(taxa_rank,&quot;-&quot;, title,&quot;.pdf&quot;, sep=&quot;&quot;) # add taxa rank before title and .pdf to the end (to save figure as pdf) ggsave(as.character(titlepdf),plot=i, device=&quot;pdf&quot;, path=plot_path, width=27.94, height = 21.59, units=&quot;cm&quot;) # save plot } 5.10 Export tables Now that we have generated our nice figures, I also recommend exporting the table as a comma separated value (CSV) file. By doing so, you will be able to access the numbers behind the graph, which can be interesting data to present in the Results section of your article. We are first generating a new column called Relative_abundance which combines all the variables (experience_sample, time_replicate, and taxa_rank) used in generating the figures. We then sum the relative abundance of similar taxa with the function aggregate. df$Relative_abundance=(paste(df$experience_sample, &quot;_&quot;, df$time_replicate,&quot;_&quot;, df[[taxa_rank]])) supplementary_dataframe=aggregate(x=df$Abundance, by=list(df$Relative_abundance), FUN=sum) # Save tables title_df=paste(taxa_rank,&quot;-&quot;,&quot;supplementary_dataframe&quot;,&quot;.csv&quot;, sep=&quot;&quot;) write.csv(supplementary_dataframe, as.character(title_df), quote=FALSE, row.names=FALSE) 5.11 Complete code You can copy-paste the following block of code inside a new markdown document. Code-chunks will be automatically generated and you can use the far right button ( ▶ ) to execute all of the code inside each chunk. ```{r} # ----------- Load libraries ----------- library(devtools) library(ggTag) # To extract title from plots library(forcats) # To reorder our factors (function &quot;fct_relevel&quot;) library(dplyr) # Dataframe manipulation (notably function &quot;pull&quot;) library(tidyr) # Dataframe manipulation (function &quot;separate&quot;) library(phyloseq) # Very pratical library for the analysis of amplicon data library(randomcoloR) # Generate sets of random colors library(ggplot2) # Generate plots library(stringr) # Makes working with strings as easy as possible (function &quot;str_replace&quot;) library(ggtext) # Allows the use of markdown text (used to make names italic) library(glue) # ----------- Define path ----------- path=&quot;~/project/domain/int_data&quot; asv=read.table(file = glue(&quot;{path}/rarefied_asv_bac.csv&quot;), sep=&quot;,&quot;, row.names=1, header=TRUE, check.names=FALSE) taxa=read.table(file = glue(&quot;{path}/rarefied_taxa_bac.csv&quot;), sep=&quot;,&quot;, row.names=1, header=TRUE) meta=read.table(file = glue(&quot;{path}/rarefied_meta_bac.csv&quot;), sep=&quot;,&quot;, row.names=1, header=TRUE) # ----------- Define rank of interest ----------- taxa_rank=&quot;Genus&quot; # ----------- Merge into phyloseq object ----------- ps=phyloseq(otu_table(asv, taxa_are_rows=TRUE), tax_table(as.matrix(taxa)), sample_data(meta)) # Get abundance in % ps_rel_abund=transform_sample_counts(ps, function(x) x/sum(x)) # Agglomerate taxa at taxonomic rank defined earlier glom=tax_glom(ps_rel_abund, taxrank = taxa_rank) # Melt to long format melted_df=psmelt(glom) # Defining the number of most abundant taxa to keep number_of_taxa=5 # ----------- Identifying most abundant taxa per sample ----------- # Create an empty list that we will populated with the unique taxa of each sample list_of_all_taxonomic_rank= list() i = 0 # Beginning of the for loop for (each_sample in unique(melted_df$Sample)){ i=i+1 sample=subset(melted_df, Sample==each_sample) # Create a new dataframe from the iterator (sample). total_abundance=aggregate(sample$Abundance, by=list(taxa_rank=sample[[taxa_rank]]), FUN=sum) # Combine together the same taxa and sum the abundances top=head(total_abundance[order(total_abundance$x, decreasing= T),], n=number_of_taxa) # Sort by abundance and keep only the X number of taxa defined by variable number_of_taxa others_df=sample[!sample[[taxa_rank]] %in% top$taxa_rank,] # Extract in a new dataframe all taxa that are not present in the dataframe `top` others_list=pull(others_df, taxa_rank) # Create a list by pulling all the values from the column corresponding to the taxa_rank into a list sample[sample[[taxa_rank]]%in% others_list,][[taxa_rank]]=&quot;Others&quot; # In the dataframe `sample` rename all the taxa from the list `others_list` as `Others` list_of_all_taxonomic_rank[[i]]=sample #save this dataframe in our list } df=do.call(&quot;rbind&quot;,list_of_all_taxonomic_rank) # combine all the dataframe from the list into one dataframe unique_taxon=data.frame(unique(df[[taxa_rank]])) # create dataframe with the unique names of taxa name=colnames(unique_taxon) # extract the name of the column in order to rename the column with the following line names(unique_taxon)[names(unique_taxon)==name]=as.character(taxa_rank) # Rename the column to the taxa rank defined earlier # ---- Create color range and italicize the taxa name ---- n=nrow(unique_taxon) # get the total number of unique most abundant taxa palette=distinctColorPalette(n) # generate a set of X unique colors corresponding to the number of unique taxa unique_taxon[[taxa_rank]]=factor(unique_taxon[[taxa_rank]]) names(palette)=levels(unique_taxon[[taxa_rank]]) # palette[[&quot;Others&quot;]]=&quot;#E1E1E1&quot; # assign gray to category &quot;Others&quot;. The same nomenclature can be use to manually change certain colors. # recreate palette with markdown to italicize name and remove the underscore after Unclassified all_names=data.frame(names(palette)) names_markdown=all_names %&gt;% mutate(names.palette.=str_replace(names.palette., &quot;(.*)&quot;,&quot;*\\\\1*&quot;), # Adding asterisk at beginning and end of every taxa names.palette.=str_replace(names.palette., &quot;\\\\*Unclassified_(.*)\\\\*&quot;,&quot;Unclassified *\\\\1*&quot;), # Remove asterisk for words that don&#39;t need to be italicize (Unclassified and Others) names.palette.=str_replace(names.palette., &quot;\\\\*Others\\\\*&quot;, &quot;Others&quot;)) list_names=as.vector(names_markdown$names.palette.) # Replace names of object names(palette)=c(list_names) # Make same modification to the taxa name from the legend to the taxa names in the dataframe df[[taxa_rank]]=str_replace(df[[taxa_rank]], &quot;(.*)&quot;,&quot;*\\\\1*&quot;) df[[taxa_rank]]=str_replace(df[[taxa_rank]], &quot;\\\\*Unclassified_(.*)\\\\*&quot;,&quot;Unclassified *\\\\1*&quot;) df[[taxa_rank]]=str_replace(df[[taxa_rank]], &quot;\\\\*Others\\\\*&quot;, &quot;Others&quot;) # Ordering the legend in alphabetical order legend_raw=unique(df[[taxa_rank]]) #Extract legend as text ordered_legend=sort(legend_raw) # order alphabetically reordered_legend=fct_relevel(ordered_legend, &quot;Others&quot;) # move &quot;Others&quot; to the beginning final_legend=levels(reordered_legend) # Extract the levels in a new object # Recreate color fill my_scale &lt;- scale_fill_manual(name=as.character(taxa_rank), breaks=paste(final_legend), values = palette, na.translate=FALSE, drop=TRUE, limits = force) # ---- Plot figures ---- plot_list = list() # Generate empty list which we will populate with our generated figures i = 0 for (experiences_and_sample in unique(df$experience_sample)){ i = i + 1 df_sample=subset(df, experience_sample==experiences_and_sample) p=ggplot(df_sample, aes(x=time_replicate, weight=Abundance, fill=fct_reorder(.data[[taxa_rank]],Abundance,.desc=FALSE))) + # .data is very important to force the evaluation of the input variables (taxonomic_rank) geom_bar() + labs(y =&#39;Relative abundance (%)&#39;, x=&quot;Time&quot;) + scale_y_continuous(expand = c(0,0)) + # Remove the white space theme_classic() + theme(text = element_text(size = 9), axis.title=element_text(size=8), legend.title=element_text(size=8), plot.title = element_text(hjust =0.5), axis.text.x = element_text(angle=70,vjust = 0.5, size=7), legend.position=&quot;bottom&quot;, legend.text=element_markdown(size=7), legend.key.size = unit(0.5, &#39;cm&#39;), # adjusting the size of the legend colored box strip.background = element_blank()) + # remove facet_grid box background ggtitle(paste(experiences_and_sample)) + # Use the value from our new column as plot title. This title will then be extracted to save the figures. my_scale + # Load our color palette facet_grid(~bioreactor, scales=&quot;free&quot;, space=&quot;free&quot;) + # facet_grid according to bioreactor guides(fill=guide_legend(nrow=6, title=taxa_rank, title.position=&quot;top&quot;, title.hjust = 0.5, reverse=FALSE)) # Adjusting the legend, notably the number of rows and position plot_list[[i]] = p # save plot into list } ``` "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
